{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"REST Against Humanity","text":"<p>REST Against Humanity is a public API for Cards Against Humanity. You can use it to programatically obtain cards from any of Cards Against Humanity's 71 official packs.</p> <p>You should probably read the rules of Cards Against Humanity before using this API.</p>"},{"location":"#endpoints","title":"Endpoints","text":""},{"location":"#packs","title":"Packs","text":"<p><code>https://restagainsthumanity.com/api/v2/packs</code></p> <p>Names of Cards Against Humanity packs available through REST Against Humanity.</p>"},{"location":"#parameters","title":"Parameters","text":"<p>None.</p>"},{"location":"#example-response","title":"Example Response","text":"<pre><code>[\"CAH Base Set\", \"2012 Holiday Pack\", \"2014 Holiday Pack\", ...]\n</code></pre>"},{"location":"#code-examples","title":"Code Examples","text":"Python (Requests) JavaScript (Axios) Kotlin (Fuel) Java Swift Ruby <pre><code>import requests\nresp = requests.get(\"https://restagainsthumanity.com/api/v2/packs\")\nif resp.status_code == 200:\nprint(resp.json())\n</code></pre> <pre><code>import axios from \"axios\";\nconst axios = require(\"axios\");\naxios.get(\"https://restagainsthumanity.com/api/v2/packs\").then((resp) =&gt; {\nif (resp.status === 200) {\nconsole.log(resp.data);\n}\n});\n</code></pre> <pre><code>val (request, response, result) = Fuel.get(\"https://restagainsthumanity.com/api/v2/packs\")\n.responseString()\nif (response.statusCode == 200) {\nprintln(response.data)\n}\n</code></pre> <pre><code>var client = HttpClient.newHttpClient();\nvar request = HttpRequest.newBuilder()\n.uri(URI.create(\"https://restagainsthumanity.com/api/v2/packs\"))\n.GET()\n.build();\nvar response = client.send(request, HttpResponse.BodyHandlers.ofString());\nif (response.statusCode() == 200) {\nSystem.out.println(response.body());\n}\n</code></pre> <pre><code>let task = URLSession.shared.dataTask(with: URL(string: \"https://restagainsthumanity.com/api/v2/packs\")!) { data, response, error in\nif let data = data, let response = response as? HTTPURLResponse, response.statusCode == 200 {\nprint(String(data: data, encoding: .utf8)!)\n}\n}\ntask.resume()\n</code></pre> <pre><code>require \"net/http\"\nrequire \"json\"\nuri = URI(\"https://restagainsthumanity.com/api/v2/packs\")\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\nrequest = Net::HTTP::Get.new(uri.request_uri)\nresponse = http.request(request)\nif response.code == \"200\"\nputs JSON.parse(response.body)\nend\n</code></pre>"},{"location":"#cards","title":"Cards","text":"<p>Cards Against Humanity cards.</p> <p><code>https://restagainsthumanity.com/api/v2/cards</code></p>"},{"location":"#parameters_1","title":"Parameters","text":"Name Type Description Required? Default packs string A comma-separated, case-sensitive, list of packs to limit the response to. No All packs color string Limit the response to either black or white cards. Must be one of either \"black\" or \"white\". No N/A pick integer The pick that black cards in the response should be limited to. (A black card's pick is the number of blank spaces it has for white cards to fill.) Must be either 1 or 2. No N/A includePackNames boolean Whether to include the name of each card's originating pack in the response. No True <p>Danger</p> <p>It's important that you separate pack names with commas only \u2014 not commas and spaces.</p> <p>For example, this is fine:</p> <pre><code>CAH Base Set,2012 Holiday Pack,90s Nostalgia Pack\n</code></pre> <p>But this is not:</p> <pre><code>CAH Base Set, 2012 Holiday Pack, 90s Nostalgia Pack\n</code></pre> <p>Unexpected whitespace will cause an HTTP 400 error.</p>"},{"location":"#example-response_1","title":"Example Response","text":"<pre><code>{\n\"black\": [\n{\n\"text\": \"_ + _ = Hipsters\",\n\"pick\": 2,\n\"pack\": \"CAH Base Set\"\n},\n{\n\"text\": \"_ is a sure sign of mankind's decline.\",\n\"pick\": 1,\n\"pack\": \"CAH Base Set\"\n},\n{\n\"text\": \"_ would only happen in my worst nightmares.\",\n\"pick\": 1,\n\"pack\": \"CAH Base Set\"\n}\n],\n\"white\": [\n{\n\"text\": \"A balanced breakfast.\",\n\"pack\": \"CAH Base Set\"\n},\n{\n\"text\": \"A big hoopla about nothing.\",\n\"pack\": \"CAH Base Set\"\n},\n{\n\"text\": \"A cat with... hands.\",\n\"pack\": \"CAH Base Set\"\n}\n]\n}\n</code></pre>"},{"location":"#code-examples_1","title":"Code Examples","text":"Python (Requests) JavaScript (Axios) Kotlin (Fuel) Java Swift Ruby <pre><code>import requests\nparams = {\"packs\": \"CAH Base Set,CAH: First Expansion\"}\nresp = requests.get(\"https://restagainsthumanity.com/api/v2/cards\", params=params)\nif resp.status_code == 200:\nprint(resp.json())\n</code></pre> <pre><code>import axios from \"axios\";\nconst axios = require(\"axios\");\naxios\n.get(\"https://restagainsthumanity.com/api/v2/cards\", {\nparams: {\npacks: \"CAH Base Set,CAH: First Expansion\",\n},\n})\n.then((resp) =&gt; {\nif (resp.status === 200) {\nconsole.log(resp.data);\n}\n});\n</code></pre> <pre><code>val (request, response, result) = Fuel.get(\"https://restagainsthumanity.com/api/v2/cards\")\n.parameter(\"packs\", \"CAH Base Set,CAH: First Expansion\")\n.responseString()\nif (response.statusCode == 200) {\nprintln(response.data)\n}\n</code></pre> <pre><code>var client = HttpClient.newHttpClient();\nvar request = HttpRequest.newBuilder()\n.uri(URI.create(\"https://restagainsthumanity.com/api/v2/cards?packs=CAH Base Set,CAH: First Expansion\"))\n.GET()\n.build();\nvar response = client.send(request, HttpResponse.BodyHandlers.ofString());\nif (response.statusCode() == 200) {\nSystem.out.println(response.body());\n}\n</code></pre> <pre><code>let task = URLSession.shared.dataTask(with: URL(string: \"https://restagainsthumanity.com/api/v2/cards?packs=CAH Base Set,CAH: First Expansion\")!) { data, response, error in\nif let data = data, let response = response as? HTTPURLResponse, response.statusCode == 200 {\nprint(String(data: data, encoding: .utf8)!)\n}\n}\ntask.resume()\n</code></pre> <pre><code>require \"net/http\"\nrequire \"json\"\nuri = URI(\"https://restagainsthumanity.com/api/v2/cards?packs=CAH Base Set,CAH: First Expansion\")\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\nrequest = Net::HTTP::Get.new(uri.request_uri)\nresponse = http.request(request)\nif response.code == \"200\"\nputs JSON.parse(response.body)\nend\n</code></pre>"}]}