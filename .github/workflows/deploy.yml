name: Deploy Documentation

on:
  push:
    branches:
      - main
      - dev

  workflow_dispatch:

jobs:
  build:
    name: Build Documentation
    environment: main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9.15

      - name: Install Poetry
        run: pipx install poetry==$(cat .poetry-version)

      - name: Set Up Cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Dependencies
        run: poetry self add poetry-source-env && poetry install --only docs
        env:
          POETRY_REPOSITORIES_MATERIAL_INSIDERS_URL: https://github.com/squidfunk/mkdocs-material-insiders
          POETRY_HTTP_BASIC_MATERIAL_INSIDERS_USERNAME: celsiusnarhwal
          POETRY_HTTP_BASIC_MATERIAL_INSIDERS_PASSWORD: ${{ secrets.GH_PAT }}
          FONTAWESOME_PKG_TOKEN: ${{ secrets.FONTAWESOME_PKG_TOKEN }}

      - name: Set Origin and PR Branches
        run: |
          echo "ORIGIN_BRANCH=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "PR_BRANCH=build/${{ github.ref_name }}/${{ github.sha }}" >> $GITHUB_ENV

      - name: Configure Git
        run: |
          git config user.name alter-negro[bot]
          git config user.email beepboop@celsiusnarhwal.dev

      - name: Create Build Branch
        run: |
          git branch ${{ env.PR_BRANCH }} origin/vercel
          poetry run poe build --branch ${{ env.PR_BRANCH }} --push

      - name: Merge Build Branch
        run: |
          gh pr create --head ${{ env.PR_BRANCH }} --base vercel --title ${{ env.PR_BRANCH }} --body ""
          gh pr merge ${{ env.PR_BRANCH }} --merge --delete-branch
        env:
          GH_TOKEN: ${{ github.token }}

    outputs:
      origin: ${{ env.ORIGIN_BRANCH }}

  artifact:
    name: Prepare Artifact
    environment: main
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: vercel

      - name: Set Origin Branch
        run: echo "ORIGIN_BRANCH=${{ needs.build.outputs.origin }}" >> $GITHUB_ENV

      - name: Restore Files
        run: git restore --source origin/${{ env.ORIGIN_BRANCH }} .poetry-version pyproject.toml poetry.lock vercel.json api

      - name: Set Up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9.15

      - name: Install Poetry
        run: pipx install poetry==$(cat .poetry-version)

      - name: Export requirements.txt
        run: poetry export -o api/requirements.txt

      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: site
          path: .

  deploy:
    name: Deploy to Vercel
    environment: main
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
    needs: artifact
    runs-on: ubuntu-latest
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: site
          path: site

      - name: Install Vercel CLI
        run: npm i -g vercel

      - name: Pull Project Settings
        run: vercel pull --yes --token ${{ secrets.VERCEL_TOKEN }}

      - name: Build for Vercel
        run: vercel build --yes --cwd site ${{ env.ORIGIN_BRANCH == 'main' && '--prod' || '' }}

      - name: Deploy to Vercel
        run: vercel --yes --prebuilt --token ${{ secrets.VERCEL_TOKEN }} ${{ env.ORIGIN_BRANCH == 'main' && '--prod' || '' }}
