{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"REST Against Humanity","text":"<p>REST Against Humanity is a public API for Cards Against Humanity. You can use it to programatically obtain sets of cards from any of Cards Against Humanity's 71 official packs.</p> <p>You should probably read the rules of Cards Against Humanity before using this API.</p>"},{"location":"#usage","title":"Usage","text":"<p>REST Against Humanity can be accessed at restagainsthumanity.com/api/v1/.</p> <p>Info</p> <p>The code examples provided here are just that - examples! Just because your preferred language doesn't appear here doesn't mean you can't use REST Against Humanity. As long as your language implements HTTP requests and responses - or has a third-party library that does - you're good.</p>"},{"location":"#getting-a-list-of-packs","title":"Getting a List of Packs","text":"<p>To obtain a list of all available packs, send a GET request to the root endpoint (<code>/api/v1</code>).]</p>  Python (Requests) JavaScript (Axios) Kotlin (Fuel) Java Swift Ruby <pre><code>import requests\nresp = requests.get(\"https://restagainsthumanity.com/api/v1\")\nif resp.status_code == 200:\nprint(resp.json())\n</code></pre> <pre><code>import axios from \"axios\";\nconst axios = require(\"axios\");\naxios.get(\"https://restagainsthumanity.com/api/v1\").then((resp) =&gt; {\nif (resp.status === 200) {\nconsole.log(resp.data);\n}\n});\n</code></pre> <pre><code>val (request, response, result) = Fuel.get(\"https://restagainsthumanity.com/api/v1\")\n.responseString()\nif (response.statusCode == 200) {\nprintln(response.data)\n}\n</code></pre> <pre><code>var client = HttpClient.newHttpClient();\nvar request = HttpRequest.newBuilder()\n.uri(URI.create(\"https://restagainsthumanity.com/api/v1\"))\n.GET()\n.build();\nvar response = client.send(request, HttpResponse.BodyHandlers.ofString());\nif (response.statusCode() == 200) {\nSystem.out.println(response.body());\n}\n</code></pre> <pre><code>let task = URLSession.shared.dataTask(with: URL(string: \"https://restagainsthumanity.com/api/v1\")!) { data, response, error in\nif let data = data, let response = response as? HTTPURLResponse, response.statusCode == 200 {\nprint(String(data: data, encoding: .utf8)!)\n}\n}\ntask.resume()\n</code></pre> <pre><code>require \"net/http\"\nrequire \"json\"\nuri = URI(\"https://restagainsthumanity.com/api/v1\")\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\nrequest = Net::HTTP::Get.new(uri.request_uri)\nresponse = http.request(request)\nif response.code == \"200\"\nputs JSON.parse(response.body)\nend\n</code></pre> <p>You'll get a list of available packs as the response:</p> <pre><code>[\n\"CAH Base Set\",\n\"2012 Holiday Pack\",\n\"2013 Holiday Pack\",\n\"2014 Holiday Pack\",\n\"90s Nostalgia Pack\",\n\"...\"\n]\n</code></pre>"},{"location":"#getting-cards","title":"Getting Cards","text":"<p>To obtain cards, specify the packs you want using the <code>packs</code> parameter.</p>  Python (Requests) JavaScript (Axios) Kotlin (Fuel) Java Swift Ruby <pre><code>import requests\nparams = {\"packs\": \"CAH Base Set,CAH: First Expansion\"}\nresp = requests.get(\"https://restagainsthumanity.com/api/v1\", params=params)\nif resp.status_code == 200:\nprint(resp.json())\n</code></pre> <pre><code>import axios from \"axios\";\nconst axios = require(\"axios\");\naxios\n.get(\"https://restagainsthumanity.com/api/v1\", {\nparams: {\npacks: \"CAH Base Set,CAH: First Expansion\",\n},\n})\n.then((resp) =&gt; {\nif (resp.status === 200) {\nconsole.log(resp.data);\n}\n});\n</code></pre> <pre><code>val (request, response, result) = Fuel.get(\"https://restagainsthumanity.com/api/v1\")\n.parameter(\"packs\", \"CAH Base Set,CAH: First Expansion\")\n.responseString()\nif (response.statusCode == 200) {\nprintln(response.data)\n}\n</code></pre> <pre><code>var client = HttpClient.newHttpClient();\nvar request = HttpRequest.newBuilder()\n.uri(URI.create(\"https://restagainsthumanity.com/api/v1?packs=CAH Base Set,CAH: First Expansion\"))\n.GET()\n.build();\nvar response = client.send(request, HttpResponse.BodyHandlers.ofString());\nif (response.statusCode() == 200) {\nSystem.out.println(response.body());\n}\n</code></pre> <pre><code>let task = URLSession.shared.dataTask(with: URL(string: \"https://restagainsthumanity.com/api/v1?packs=CAH Base Set,CAH: First Expansion\")!) { data, response, error in\nif let data = data, let response = response as? HTTPURLResponse, response.statusCode == 200 {\nprint(String(data: data, encoding: .utf8)!)\n}\n}\ntask.resume()\n</code></pre> <pre><code>require \"net/http\"\nrequire \"json\"\nuri = URI(\"https://restagainsthumanity.com/api/v1?packs=CAH Base Set,CAH: First Expansion\")\nhttp = Net::HTTP.new(uri.host, uri.port)\nhttp.use_ssl = true\nrequest = Net::HTTP::Get.new(uri.request_uri)\nresponse = http.request(request)\nif response.code == \"200\"\nputs JSON.parse(response.body)\nend\n</code></pre> <p>Danger</p> <p>It's important that you separate pack names with commas only \u2014 not commas and spaces.</p> <p>For example, this is fine:</p> <pre><code>CAH Base Set,2012 Holiday Pack,90s Nostalgia Pack\n</code></pre> <p>But this is not:</p> <pre><code>CAH Base Set, 2012 Holiday Pack, 90s Nostalgia Pack\n</code></pre> <p>Unexpected whitespace will cause an HTTP 400 error.</p> <p>The response will come formatted like this:</p> <pre><code>{\n\"black\": [\n{\n\"text\": \"_ + _ = Hipsters\",\n\"pick\": 2,\n\"pack\": \"CAH Base Set\"\n},\n{\n\"text\": \"_ is a sure sign of mankind's decline.\",\n\"pick\": 1,\n\"pack\": \"CAH Base Set\"\n},\n{\n\"text\": \"_ would only happen in my worst nightmares.\",\n\"pick\": 1,\n\"pack\": \"CAH Base Set\"\n}\n],\n\"white\": [\n{\n\"text\": \"A balanced breakfast.\",\n\"pack\": \"CAH Base Set\"\n},\n{\n\"text\": \"A big hoopla about nothing.\",\n\"pack\": \"CAH Base Set\"\n},\n{\n\"text\": \"A cat with... hands.\",\n\"pack\": \"CAH Base Set\"\n}\n]\n}\n</code></pre> <p><code>pick</code> signifies the number of white cards each player must play. It will always be either <code>1</code> or <code>2</code>.</p>"}]}